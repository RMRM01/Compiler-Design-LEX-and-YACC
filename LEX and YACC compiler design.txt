%{
#include "calc.tab.h"  // Include the Yacc header file for token types
#include <stdio.h>
#include <stdlib.h>
%}

%%
[0-9]+(\.[0-9]+)?   { yylval.dval = atof(yytext); return NUMBER; }  // Number token
"\n"               {return '\n';}
"+"                 { return '+'; }
"-"                 { return '-'; }
"*"                 { return '*'; }
"/"                 { return '/'; }
"^"                 { return '^'; }
"sin"               { return SIN; }
"cos"               { return COS; }
"tan"               { return TAN; }
"log"               { return LOG; }
"sqrt"              { return SQRT; }
.                   {}  // Return single character token (for operators, parentheses)

%% 

int yywrap() {
    return 1;
}



%{
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

int yylex();  // Declare the yylex function
void yyerror(const char *s);  // Declare yyerror function
%}

%union {
    double dval;  // Define a union for storing double values
}

%token <dval> NUMBER  // Token for numbers
%token SIN COS TAN LOG SQRT  // Trigonometric and mathematical functions
%type <dval> calculation expression  // Define the type for these non-terminals

%left '+' '-'
%left '*' '/'
%right '^'
%left '(' ')'
%right UMINUS  // Handling unary minus

%% 

calculation:
    calculation expression '\n' { $$ = $2; printf("Result: %lf\n", $$); }
    | /* Empty */ 
    |   expression '\n' { $$ = $1; printf("Result: %lf\n", $$); }
    ;

expression:
    NUMBER                     { $$ = $1; }
    | expression '+' expression { $$ = $1 + $3; }
    | expression '-' expression { $$ = $1 - $3; }
    | expression '*' expression { $$ = $1 * $3; }
    | expression '/' expression { 
        if ($3 == 0) {
            yyerror("Division by zero!");
            $$ = 0;
        } else {
            $$ = $1 / $3;
        }
    }
    | expression '^' expression { $$ = pow($1, $3); }
    | '-' expression %prec UMINUS { $$ = -$2; }
    | '(' expression ')'         { $$ = $2; }
    | SIN '(' expression ')'     { $$ = sin($3); }
    | COS '(' expression ')'     { $$ = cos($3); }
    | TAN '(' expression ')'     { $$ = tan($3); }
    | LOG '(' expression ')'     { 
        if ($3 <= 0) {
            yyerror("Logarithm of non-positive value!");
            $$ = 0;
        } else {
            $$ = log($3); 
        }
    }
    | SQRT '(' expression ')'    { 
        if ($3 < 0) {
            yyerror("Square root of negative value!");
            $$ = 0;
        } else {
            $$ = sqrt($3); 
        }
    }
    ;

%% 

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {

    yyparse();
}





#include <stdio.h>
#include <math.h>

int main() {
    // Calculate e^3
    double result = exp(3);
    
    // Print the result
    printf("e^3 = %.6f\n", result);
    
    return 0;
}






%{
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

%}

%%
"if"|"else"|"include"|"while"|"stdio.h" {printf("keyword: %s\n",yytext);}
[0-9]+ {printf("integer: %s\n",yytext);}
[0-9]*"."[0-9]+ {printf("Float: %s\n",yytext);}
[+\-*/] {printf("arithmatic Operator: %s\n",yytext);}
"=="|"||" |"<=" {printf("Relational Operator: %s\n",yytext);} 

%%
int yywrap()
{
return 1;
}
int main()
{
yylex();
return 0;
}




%{
#include <stdio.h>
#include <stdlib.h>
%}

%option noyywrap

%%
"if"|"else"|"while"|"for"|"return"|"int"|"float"|"char"|"void" { printf("Keyword: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]* { printf("Identifier: %s\n", yytext); }
[0-9]+ { printf("Integer: %s\n", yytext); }
[0-9]*\.[0-9]+|[0-9]+\.[0-9]* { printf("Float: %s\n", yytext); }
"=="|"!="|"<="|">="|"<"|">"|"\+"|"-"|"*"|"/"|"=" { printf("Operator: %s\n", yytext); }
";"|","|"\(" |"\)"|"\{"|"\}"|"["|"]" { printf("Punctuation: %s\n", yytext); }
"//".* { printf("Single-line Comment: %s\n", yytext); }
"/\*"([^*]|\*+[^*/])*\*+/" { printf("Multi-line Comment: %s\n", yytext); }
\"([^\\\"]|\\.)*\" { printf("String: %s\n", yytext); }
[ \t\n]+ { /* Ignore */ }
. { printf("Unknown: %s\n", yytext); }
%%

int main(int argc, char* argv[]) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror("fopen");
            return EXIT_FAILURE;
        }
        yyin = file;
    }
    yylex();
    return 0;
}




//calculator 
%{
#include "calc.tab.h"
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
%}

%%
[0-9]+(\.[0-9]+)? {
    yylval.dval = atof(yytext);
    return NUMBER;
}
"sin" { return SIN; }
"cos" { return COS; }
"tan" { return TAN; }
"log" { return LOG; }
"sqrt" { return SQRT; }
[+\-*/^()] { return yytext[0]; }
[ \t] { /* Ignore whitespace */ }
\n { return '\n'; }
. { printf("Unknown character: %s\n", yytext); }
%%

int yywrap() {
    return 1;
}


%{
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

void yyerror(const char *s);
int yylex();
%}

%union {
    double dval;
}

%token <dval> NUMBER
%token SIN COS TAN LOG SQRT
%left '+' '-'
%left '*' '/'
%right '^'

%type <dval> expr calculate

%%
calculate:
    calculate '\n'
  | calculate expr '\n' { $$ = $2; printf("Result: %f\n", $$); }
  | /* empty rule */ { $$ = 0; }
;

expr:
      NUMBER               { $$ = $1; }
    | expr '+' expr        { $$ = $1 + $3; }
    | expr '-' expr        { $$ = $1 - $3; }
    | expr '*' expr        { $$ = $1 * $3; }
    | expr '/' expr        { $$ = $1 / $3; }
    | expr '^' expr        { $$ = pow($1, $3); }
    | '(' expr ')'         { $$ = $2; }
    | SIN '(' expr ')'     { $$ = sin($3); }
    | COS '(' expr ')'     { $$ = cos($3); }
    | TAN '(' expr ')'     { $$ = tan($3); }
    | LOG '(' expr ')'     { $$ = log($3); }
    | SQRT '(' expr ')'    { $$ = sqrt($3); }
;

%%
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter an expression:\n");
    yyparse();
    return 0;
}



//input from a file and output in a file



%{
#include <stdio.h>
#include <stdlib.h>
extern FILE *yyin;
FILE *outputFile;
%}

%option noyywrap

%%

[a-zA-Z_][a-zA-Z0-9_]* { fprintf(outputFile, "%s", yytext); }
[0-9]+ { fprintf(outputFile, "%s", yytext); }
[!/?]* { fprintf(outputFile, "%s", yytext); }
[ ]* { fprintf(outputFile, " "); }
[ \t]+ { fprintf(outputFile, " "); }
[\n]* {}
. { fprintf(outputFile, "%s", yytext); }
%%

int main(int argc, char* argv[]) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror("Error opening input file");
            return EXIT_FAILURE;
        }
        yyin = file;
    } else {
        printf("No input file provided. Reading from standard input.\n");
    }

    outputFile = fopen("output.txt", "w");
    if (!outputFile) {
        perror("Error opening output file");
        return EXIT_FAILURE;
    }

    yylex();

    if (outputFile) {
        fclose(outputFile);
    }

    if (yyin && yyin != stdin) {
        fclose(yyin);
    }

    return 0;
}




//YYABORT



%{
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include<string.h>

void yyerror(const char *s);
int yylex();
char input_[100];
extern int yy_flex_debug;
%}

%union {
    double dval;
}

%token <dval> NUMBER
%token SIN COS TAN LOG SQRT
%left '+' '-'
%left '*' '/'
%right '^'
%type <dval> expr calculate

%%
calculate:
    calculate '\n'
  | calculate expr '\n' { $$ = $2; printf("Valid Expression: %s Result: %f\n",input_, $$); }
  | /* empty rule */ { $$ = 0; }
;

expr:
      NUMBER               { $$ = $1; }
    | expr '+' expr        { $$ = $1 + $3; }
    | expr '-' expr        { $$ = $1 - $3; }
    | expr '*' expr        { $$ = $1 * $3; }
    | expr '/' expr        { $$ = $1 / $3; }
    | expr '*''+' expr        { printf("invalid expression: %s",input_);
                                 YYABORT; }
    | '(' expr ')'         { $$ = $2; }
    | SIN '(' expr ')'     { $$ = sin($3); }
    | COS '(' expr ')'     { $$ = cos($3); }
    | TAN '(' expr ')'     { $$ = tan($3); }
    | LOG '(' expr ')'     { $$ = log($3); }
    | SQRT '(' expr ')'    { $$ = sqrt($3); }
;

%%
void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
      yy_flex_debug=0;
        memset(input_, 0, sizeof(input_));  // Clear the buffer for each new input
        yyparse();
    
  
    return 0;
}



%{
#include "c.tab.h"
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include<string.h>
char input_[100];
int idx=0;
%}

%%
[0-9]+(\.[0-9]+)? { 
yylval.dval = atof(yytext);
    strcat(input_,yytext);
    return NUMBER;
}
"sinh" {  strcat(input_,yytext); return SIN; }
"cosh" {  strcat(input_,yytext); return COS; }

[+\-*/^()] {  strncat(input_,yytext,1); return yytext[0]; }
[ \t] {}
"\n" { return '\n'; }

%%

int yywrap() {
    return 1;
}

